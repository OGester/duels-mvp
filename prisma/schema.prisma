// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")//"postgresql://postgres.wwcavlovsmcaxejhtbkz:%Tattoo12345%@aws-0-eu-north-1.pooler.supabase.com:6543/postgres?pgbouncer=true" 
  directUrl = env("DIRECT_URL")//"postgresql://postgres.wwcavlovsmcaxejhtbkz:%Tattoo12345%@aws-0-eu-north-1.pooler.supabase.com:5432/postgres"
  
  //env("DATABASE_URL")//
  //env("DIRECT_URL")//
}

model user {
  user_id               String @id @default(uuid())
  username              String
  email                 String @unique
  passwordHash          String
  role                  Role @default(USER)
  profile               profile?

  created_leauges       league[] 
  leagues_joined        league_user[]
  league_roles          league_user_role[]

  created_at             DateTime  @default(now())
}

model profile{
  profile_id              String @id @default(uuid())
  profile_image_url       String? 
  description             String?
  score                   Int @default(0)
  
  user_id                 String @unique
  user                    user @relation(fields: [user_id], references: [user_id], onDelete: Cascade)          

}


model league {
  league_id              String @id @default(uuid())

  created_by_id          user    @relation(fields: [created_by],references: [user_id], onDelete: Cascade)
  created_by             String
  name                   String
  type                   LeagueType
  isPublic               Boolean  //should this be set to public by default?
  start_date             DateTime 
  end_date               DateTime
  description            String //should description be optional?
 
  members                league_user[]

  created_at             DateTime  @default(now())

  league_user_role       league_user_role[]
}

model league_user_role {
  league_user_role_id         String @id @default(uuid())
  user                   user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id                String

  league                 league  @relation(fields: [league_id], references: [league_id], onDelete: Cascade)
  league_id              String
  role                   Role
  created_at             DateTime @default(now())
   @@unique([user_id, league_id])
}

model league_user {
  league_user_id         String @id @default(uuid())
  user                   user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id                String

  league                 league  @relation(fields: [league_id], references: [league_id], onDelete: Cascade)
  league_id              String
  role                   Role @default(USER)

  status                 MembershipStatus
  requested_at           DateTime @default(now())
  updated_at             DateTime?

  payment               payment? @relation("leagueUserPayment")//assuming this should be optional? so the creator of the league decides if it free?

  @@unique([user_id, league_id]) // this anotation makes sure a user canÂ´t join the same league multiple times
  
}


model payment {
  payment_id             String  @id @default(uuid())
  league_user_id         String @unique
  amount                 Float

  payment_status         PaymentStatus
  payment_date           DateTime
  league_user            league_user @relation("leagueUserPayment", fields: [league_user_id], references: [league_user_id], onDelete: Cascade)
}

//All ENUMS

enum Role {
  USER
  ADMIN
  OWNER
  SUPERADMIN
}

enum LeagueType {
  GLOBAL
  LOCAL
}

enum MembershipStatus {
  PENDING
  PENDING_PAYMENT
  ACCEPTED
  DECLINED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}




